struct <%TYPE%>Traits
{
  typedef <%TYPE%> MessageType;
  typedef <%TYPE%>_var MessageVarType;
  typedef <%TYPE%><%SEQ%> MessageSequenceType;
  typedef <%TYPE%>TypeSupport TypeSupportType;
  typedef <%TYPE%>TypeSupport_var TypeSupportVarType;
  typedef <%TYPE%>DataWriter DataWriterType;
  typedef <%TYPE%>DataWriter_var DataWriterVarType;
  typedef <%TYPE%>DataReader DataReaderType;
  typedef <%TYPE%>DataReader_var DataReaderVarType;
  typedef OpenDDSGenerated::<%TYPE%>_KeyLessThan LessThanType;

  inline static const char* type_name () { return "<%TYPE%>"; }
  inline static bool gen_has_key (const MessageType& x) { return ::OpenDDS::DCPS::gen_has_key(x); }

  inline static bool gen_is_bounded_size (const MessageType& x) { return ::OpenDDS::DCPS::gen_is_bounded_size(x); }
  inline static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  inline static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  inline static bool gen_is_bounded_size (const OpenDDS::DCPS::KeyOnly<const MessageType>& x) { return ::OpenDDS::DCPS::gen_is_bounded_size(x); }
  inline static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  inline static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};

typedef OpenDDS::DataWriterImpl<<%TYPE%>Traits> <%TYPE%>DataWriterImpl;
typedef OpenDDS::DataReaderImpl<<%TYPE%>Traits> <%TYPE%>DataReaderImpl;
typedef OpenDDS::TypeSupportImpl<<%TYPE%>Traits> <%TYPE%>TypeSupportImpl;
