class <%TYPE%>TypeSupportImpl;

struct <%TYPE%>Traits
{
  typedef <%TYPE%> MessageType;
  typedef <%TYPE%><%SEQ%> MessageSequenceType;
  typedef <%TYPE%>DataWriter DataWriterType;
  typedef <%TYPE%>DataReader DataReaderType;
  typedef OpenDDSGenerated::<%TYPE%>_KeyLessThan LessThanType;
  typedef <%TYPE%>TypeSupportImpl TypeSupportImplType;

  static const char* type_name() { return "<%TYPE%>"; }
};

typedef OpenDDS::DataWriterImpl<<%TYPE%>Traits> <%TYPE%>DataWriterImpl;
typedef OpenDDS::DataReaderImpl<<%TYPE%>Traits> <%TYPE%>DataReaderImpl;

/** Servant for TypeSupport interface of <%TYPE%> data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 *
 */
class <%EXPORT%> <%TYPE%>TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<<%TYPE%>TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef <%TYPE%>                message_type;
  typedef <%TYPE%>_var            message_var;
  typedef <%TYPE%>TypeSupport     typesupport_type;
  typedef <%TYPE%>TypeSupport_var typesupport_var;
  typedef <%TYPE%>DataWriter      datawriter_type;
  typedef <%TYPE%>DataReader      datareader_type;
  typedef <%TYPE%>DataWriter_var  datawriter_var;
  typedef <%TYPE%>DataReader_var  datareader_var;
  typedef <%TYPE%>DataWriterImpl  datawriterimpl_type;
  typedef <%TYPE%>DataReaderImpl  datareaderimpl_type;

  <%TYPE%>TypeSupportImpl();
  virtual ~<%TYPE%>TypeSupportImpl();

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();

#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif

  virtual bool has_dcps_key();

  typedef <%TYPE%>TypeSupport::_ptr_type _ptr_type;
  typedef <%TYPE%>TypeSupport::_var_type _var_type;
  typedef <%TYPE%>DataWriter data_writer_type;
  typedef <%TYPE%>DataReader data_reader_type;
  typedef ::<%SCOPED%> data_sample_type;
  typedef ::<%SCOPED%><%SEQ%> data_sequence_type;

  static _ptr_type _narrow(CORBA::Object_ptr obj) {
    return <%TYPE%>TypeSupport::_narrow(obj);
  }
};
