#include <TryConstructBaseTypes.idl>

module TryCon {

  @mutable
  struct StringTest1 {
    str64 str64_d;
    str64 str64_ud;
    str64 str64_t;
  };

  @mutable
  struct StringTest2 {
    @try_construct(DISCARD) str20 str20_d;
    @try_construct(USE_DEFAULT) str20 str20_ud;
    @try_construct(TRIM) str20 str20_t;
  };

  @topic
  @extensibility(MUTABLE)
  union BaseDiscrimUnion switch (EnumType2) {
    case B1: short s1;
    case B2: short s2;
    case B3: short s3;
    case B4: short s4;
  };

  @topic
  @extensibility(MUTABLE)
  union DiscardDiscrimUnion switch (@try_construct(DISCARD) EnumType) {
    case VALUE1: short s1;
    case VALUE2: short s2;
  };

  @topic
  @extensibility(MUTABLE)
  union DefaultDiscrimUnion switch (@try_construct(USE_DEFAULT) EnumType) {
    case VALUE1: short s1;
    case VALUE2: short s2;
  };

    @mutable
  struct DiscardStructString1 {
    str64 str64_d;
  };

  @mutable
  struct DiscardStructString2 {
    str20 str20_d;
  };

  @mutable
  struct DiscardStructWString1 {
    wstr64 wstr64_d;
  };

  @mutable
  struct DiscardStructWString2 {
    wstr20 wstr20_d;
  };

  @mutable
  struct DiscardStructStruct1 {
    NestedStruct ns;
  };

  @mutable
  struct DiscardStructStruct2 {
    NestedStructTrim ns;
  };

  @mutable
  struct DiscardStructArray1 {
    str64Array sa;
  };

  @mutable
  struct DiscardStructArray2 {
    str20Array sa;
  };

  typedef sequence <str64> ss_64;
  typedef sequence <str20> ss_20;

  @mutable
  struct DiscardStructSequence1 {
    ss_64 ss64;
  };

  @mutable
  struct DiscardStructSequence2 {
    ss_20 ss20;
  };

  @mutable
  struct DiscardStructArrayAnon1 {
    str64 saa64[3];
  };

  @mutable
  struct DiscardStructArrayAnon2 {
    str20 saa20[3];
  };

  @mutable
  struct DiscardStructSequenceAnon1 {
    sequence <str64> ssa64;
  };

  @mutable
  struct DiscardStructSequenceAnon2 {
    sequence <str20> ssa20;
  };

  @topic
  @mutable
  struct AnonArrStruct {
    //string
    str64 AnonStringArr[3];
    //wstring
    wstr64 AnonWideStringArr[3];
    //array
    str64Array AnonArrayArr[3];
    //sequence
    ShortSeqBound2 AnonArrShortSeqBound[3];
  };

  @topic
  @mutable
  struct AnonArrStructTrim {
    //string
    str20 AnonStringArr @try_construct(TRIM) [3];
    //wstring
    wstr20 AnonWideStringArr @try_construct(TRIM) [3];
    //array
    str20ArrayTrim AnonArrayArr [3];
    //sequence
    ShortSeqBound AnonArrShortSeqBound @try_construct(TRIM) [3];
  };

  @topic
  @mutable
  struct AnonArrStructUseDefault {
    //string
    str20 AnonStringArr @try_construct(USE_DEFAULT) [3];
    //wstring
    wstr20 AnonWideStringArr @try_construct(USE_DEFAULT) [3];
    //array
    str20Array AnonArrayArr @try_construct(USE_DEFAULT) [3];
    //sequence
    ShortSeqBound AnonArrShortSeqBound @try_construct(USE_DEFAULT) [3];
  };

};
