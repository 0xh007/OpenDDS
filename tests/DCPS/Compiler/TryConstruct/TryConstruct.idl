/*
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#include <TryConstructBaseTypes.idl>

module TryCon {

  @topic
  @mutable
  struct AnonSeqStruct {
    sequence <EnumType, 3> AnonEnumSeqBound;
    //primitives
    sequence <short, 3> AnonShortSeqBound;
    sequence <unsigned short, 3> AnonUnsignedShortSeqBound;
    //string
    sequence <str64, 3> AnonStringSeqBound;
    //wstring
    sequence <wstr64, 3> AnonWideStringSeqBound;
    //array
    sequence <ShortArray, 3> AnonShortArraySeqBound;
    //sequence
    sequence <ShortSeqUnbound> AnonShortSeqUnboundUnbound;
    sequence <ShortSeqUnbound, 3> AnonSeqShortSeqUnboundBound;
    sequence <ShortSeqBound2> AnonSeqShortSeqBoundUnbound;
    sequence <ShortSeqBound2, 3> AnonSeqShortSeqBoundBound;
  };

  @topic
  @mutable
  struct AnonSeqStructTrim {
    @try_construct(TRIM) sequence <EnumType, 2> AnonEnumSeqBound;
    //primitives
    @try_construct(TRIM) sequence <short, 2> AnonShortSeqBound;
    @try_construct(TRIM) sequence <unsigned short, 2> AnonUnsignedShortSeqBound;
    //string
    @try_construct(TRIM) sequence <@try_construct(TRIM) str20, 2> AnonStringSeqBound;
    //wstring
    @try_construct(TRIM) sequence <@try_construct(TRIM) wstr20, 2> AnonWideStringSeqBound;
    //array
    @try_construct(TRIM) sequence <ShortArray, 2> AnonShortArraySeqBound;
    //sequence
    @try_construct(TRIM) sequence <ShortSeqUnbound> AnonShortSeqUnboundUnbound;
    @try_construct(TRIM) sequence <ShortSeqUnbound, 2> AnonSeqShortSeqUnboundBound;
    @try_construct(TRIM) sequence <@try_construct(TRIM) ShortSeqBound> AnonSeqShortSeqBoundUnbound;
    @try_construct(TRIM) sequence <@try_construct(TRIM) ShortSeqBound, 2> AnonSeqShortSeqBoundBound;
  };

  @topic
  @mutable
  struct AnonSeqStructDefault {
    @try_construct(USE_DEFAULT) sequence < EnumType, 2> AnonEnumSeqBound;
    //primitives
    @try_construct(USE_DEFAULT) sequence <short, 2> AnonShortSeqBound;
    @try_construct(USE_DEFAULT) sequence <unsigned short, 2> AnonUnsignedShortSeqBound;
    //string
    @try_construct(USE_DEFAULT) sequence <str20, 2> AnonStringSeqBound;
    //wstring
    @try_construct(USE_DEFAULT) sequence <wstr20, 2> AnonWideStringSeqBound;
    //array
    @try_construct(USE_DEFAULT) sequence <ShortArray, 2> AnonShortArraySeqBound;
    //sequence
    @try_construct(USE_DEFAULT) sequence <ShortSeqUnbound> AnonShortSeqUnboundUnbound;
    @try_construct(USE_DEFAULT) sequence <ShortSeqUnbound, 2> AnonSeqShortSeqUnboundBound;
    @try_construct(USE_DEFAULT) sequence <ShortSeqBound> AnonSeqShortSeqBoundUnbound;
    @try_construct(USE_DEFAULT) sequence <ShortSeqBound, 2> AnonSeqShortSeqBoundBound;
  };

  @topic
  @extensibility(MUTABLE)
  union BaseUnion switch (@try_construct(DISCARD) short) {
    case 0: @try_construct(DISCARD) str64 str_d;
    case 1: @try_construct(USE_DEFAULT) str64 str_ud;
    case 2: @try_construct(TRIM) str64 str_t;
    case 3: @try_construct(DISCARD) wstr64 wstr_d;
    case 4: @try_construct(USE_DEFAULT) wstr64 wstr_ud;
    case 5: @try_construct(TRIM) wstr64 wstr_t;
    case 6: @try_construct(DISCARD) str64Array stra_d;
    case 7: @try_construct(USE_DEFAULT) str64Array stra_ud;
    case 8: @try_construct(TRIM) str64Array stra_t;
    case 9: @try_construct(DISCARD) StringSeqBound2 strs_d;
    case 10: @try_construct(USE_DEFAULT) StringSeqBound2 strs_ud;
    case 11: @try_construct(TRIM) StringSeqBound2 strs_t;
    case 12: @try_construct(DISCARD) EnumType2 e_d;
    case 13: @try_construct(USE_DEFAULT) EnumType2 e_ud;
    default: @try_construct(TRIM) str64 def;
  };

  @topic
  @extensibility(MUTABLE)
  union DiscardUnion switch (@try_construct(DISCARD) short) {
    case 0: @try_construct(DISCARD) str20 str_d;
    case 3: @try_construct(DISCARD) wstr20 wstr_d;
    case 6: @try_construct(DISCARD) str20Array stra_d;
    case 9: @try_construct(DISCARD) StringSeqBound strs_d;
    case 12: @try_construct(DISCARD) EnumType e_d;
    default: @try_construct(TRIM) str20 def;
  };

  @topic
  @extensibility(MUTABLE)
  union TrimUnion switch (short) {
    case 2: @try_construct(TRIM) str20 str_t;
    case 5: @try_construct(TRIM) wstr20 wstr_t;
    case 8: @try_construct(TRIM) str20ArrayTrim stra_t;
    case 11: @try_construct(TRIM) StringSeqBound strs_t;
    default: @try_construct(TRIM) str20 def;
  };

  @topic
  @extensibility(MUTABLE)
  union DefaultUnion switch (@try_construct(USE_DEFAULT) short) {
    case 1: @try_construct(USE_DEFAULT) str20 str_ud;
    case 4: @try_construct(USE_DEFAULT) wstr20 wstr_ud;
    case 7: @try_construct(USE_DEFAULT) str20Array stra_ud;
    case 10: @try_construct(USE_DEFAULT) StringSeqBound strs_ud;
    case 13: @try_construct(USE_DEFAULT) EnumType e_ud;
    default: @try_construct(TRIM) str20 def;
  };

};
