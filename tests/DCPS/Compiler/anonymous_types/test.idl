#include <tao/LongSeq.pidl>
#include <tao/ShortSeq.pidl>

module moduleA {

typedef double D3[3];
typedef long L2x3x4a[2][3][4];

@topic
struct StructA {
  @key D3 position;
  @key double velocity[3];
  L2x3x4a l2x3x4;
  short s2x3x4a[2][3][4];
  short s2x3x4a_2nd[2][3][4];
  //@key short s2x3x4a_key[2][3][4];
  sequence<long, 3> a_l3seq;
};

struct StructB {
  sequence<short> ids;
  sequence<long, 3> l3;
};

}; //moduleA


typedef short Short3Array[3];
typedef short Short2x3Array[2][3];
typedef double Double2x3x4Array[2][3][4];
typedef string Str2x3x4x5Array[2][3][4][5];
typedef Short3Array Short3Array_x2[2];

struct StructOfMultiDimArray {
  Str2x3x4x5Array str2x3x4x5arr;
  Short3Array_x2 s3arr_x2arr;
};

typedef sequence<long> LongSequence;
typedef sequence<long, 3> Long3Sequence;
typedef string<100> BoundedString;

struct NS {
  long n;
  string s;
};

typedef struct XYZ_ {
  double x;
  double y;
  double z;
} XYZ;

typedef sequence<XYZ> XYZSequence;

@topic
struct TestStruct {
  char c;
  float f;
  string str;
  XYZ position;

  Short3Array s3arr;
  Short2x3Array s2x3arr;
  Double2x3x4Array d2x3x4arr;
  StructOfMultiDimArray smda;

  LongSequence lseq;
  Long3Sequence l3seq;
  BoundedString bstr;
  XYZSequence xyzseq;

  // prefix a_ denotes anonymous type fields

  short a_s3arr[3];
  short a_s3arr_2nd[3];
  @key long a_l2arr_key[2];
  //@key short a_s2x3arr_key[2][3];
  short a_s2x3arr[2][3];
  double a_d2x3x4arr[2][3][4];

  sequence<long> a_lseq;
  sequence<long> a_lseq_2nd;
  sequence<long, 3> a_l3seq;
  sequence<long, 3> a_l3seq_2nd;
  sequence<long, 5> a_l5seq;

  string<200> a_bstr;
  sequence<XYZ> a_xyzseq;
  sequence<NS, 5> a_ns5seq;

  //test C++ keyword used as anonymous type field
  //to see all escaping is done correctly
  sequence<long, 3> _long; // _tao_seq_CORBA_Long__3 _cxx_long;
  sequence<long, 3> break; // _tao_seq_CORBA_Long__3 _cxx_break;
  sequence<long, 3> class; // _tao_seq_CORBA_Long__3 _cxx_class;
};

// ========== ========== ========== ========== ==========
//from Relay.idl
#include <dds/DdsDcpsCore.idl>

module RtpsRelay {
  typedef octet GuidPrefix_t[12]; //GUID prefix bytes - uniquely specify the participant
  typedef octet EntityKey_t[3];   //Key portion of Entity identifier

  struct EntityId_t { //Uniquely identify each entity within a participant
    @key EntityKey_t entityKey;
    @key octet entityKind;
  };

  struct GUID_t {
    @key GuidPrefix_t guidPrefix;
    @key EntityId_t entityId;
  };

  @topic
  struct WriterEntry {
    @key GUID_t guid;
    string topic_name;
    string type_name;
    DDS::DataWriterQos data_writer_qos;
    DDS::PublisherQos publisher_qos;
  };

  @topic
  struct ReaderEntry {
    @key GUID_t guid;
    string topic_name;
    string type_name;
    DDS::DataReaderQos data_reader_qos;
    DDS::SubscriberQos subscriber_qos;
  };

  @topic
  struct GuidNameAddress {
    @key GUID_t guid;
    @key string name;
    string address;
  };

  typedef sequence<GUID_t> GuidSequence;

  struct RelayHeader {
    GuidSequence to;
  };
//...

  // test anonymous fields in module and topic
  @topic
  struct AnonymousFields {
    @key GUID_t guid;
//    @key short a_s2x3arr[2][3];
    sequence<long, 5> a_l5seq;
  };
};
