#include <tao/LongSeq.pidl>
#include <tao/ShortSeq.pidl>
#include <tao/OctetSeq.pidl>

// TODO(iguessthislldo): Add more fields
#define COMMON_FIELDS \
  short short_field; \
  long long_field; \
  octet octet_field; \
  long long long_long_field; \

// Generic XCDR1 Tests =======================================================

@final
@OpenDDS::data_representation(XCDR1)
struct FinalXcdr1Struct {
  COMMON_FIELDS
};

@appendable
@OpenDDS::data_representation(XCDR1)
struct AppendableXcdr1Struct {
  COMMON_FIELDS
};

@mutable
@OpenDDS::data_representation(XCDR1)
struct MutableXcdr1Struct {
  COMMON_FIELDS
};

// Generic XCDR2 Tests =======================================================

@final
@OpenDDS::data_representation(XCDR2)
struct FinalXcdr2Struct {
  COMMON_FIELDS
};

@appendable
@OpenDDS::data_representation(XCDR2)
struct AppendableXcdr2Struct {
  COMMON_FIELDS
};

@mutable
@OpenDDS::data_representation(XCDR2)
struct MutableXcdr2Struct {
  COMMON_FIELDS
};

// Generic XCDR1/2 Tests =====================================================

@final
@OpenDDS::data_representation(XCDR1)
@OpenDDS::data_representation(XCDR2)
struct FinalXcdr12Struct {
  COMMON_FIELDS
};

@appendable
@OpenDDS::data_representation(XCDR1)
@OpenDDS::data_representation(XCDR2)
struct AppendableXcdr12Struct {
  COMMON_FIELDS
};

@mutable
@OpenDDS::data_representation(XCDR1)
@OpenDDS::data_representation(XCDR2)
struct MutableXcdr12Struct {
  COMMON_FIELDS
};

enum CommonFields {
  E_SHORT_FIELD,
  E_LONG_FIELD,
  E_OCTET_FIELD,
  E_LONG_LONG_FIELD
};

@mutable
@OpenDDS::data_representation(XCDR1)
@OpenDDS::data_representation(XCDR2)
union MutableXcdr12Union switch (CommonFields) {
case E_SHORT_FIELD:
  short short_field;
case E_LONG_FIELD:
  long long_field;
case E_OCTET_FIELD:
  octet octet_field;
case E_LONG_LONG_FIELD:
  long long long_long_field;
};

// Appendable Tests ==========================================================
// TODO(iguessthislldo)

// Mutable Tests =============================================================
// TODO(iguessthislldo): Add more fields

@mutable
@OpenDDS::data_representation(XCDR1)
@OpenDDS::data_representation(XCDR2)
struct MutableStruct {
  @id(4) short short_field;
  @id(6) long long_field;
  @id(8) octet octet_field;
  @id(10) long long long_long_field;
};

@mutable
@OpenDDS::data_representation(XCDR1)
@OpenDDS::data_representation(XCDR2)
struct ReorderedMutableStruct {
  @id(6) long long_field;
  @id(10) long long long_long_field;
  @id(8) octet octet_field;
  @id(4) short short_field;
};

@mutable
@OpenDDS::data_representation(XCDR1)
@OpenDDS::data_representation(XCDR2)
struct AdditionalFieldMutableStruct {
  @id(6) long long_field;
  @id(1) long additional_field;
  @id(10) long long long_long_field;
  @id(8) octet octet_field;
  @id(4) short short_field;
};

@final
struct Bool3 {
  boolean a;
  boolean b;
  boolean c;
};

@final
struct Octet5 {
  octet a;
  octet b;
  octet c;
  octet d;
  octet e;
};

@final
struct Short3 {
  short x;
  short y;
  short z;
};

@final
struct Struct7 {
  Short3 s3;
  octet o;
};

@final
struct Long3 {
  long a;
  long b;
  long c;
};

@mutable
@OpenDDS::data_representation(XCDR2)
struct LengthCodeStruct { //LC Size
  @key
  @id(0) octet o;         // 0    1
  @id(1) short s;         // 1    2
  @id(2) long l;          // 2    4
  @id(3) long long ll;    // 3    8

  @id(4) Bool3 b3;        // 4    3
  @id(5) Octet5 o5;       // 4    5
  @key
  @id(6) Short3 s3;       // 4    6
  @id(7) Struct7 t7;      // 4    7
  @id(8) Long3 l3;        // 4   12

  @id(11) string<1> str1; // 4  4+1
  @id(12) string<2> str2; // 4  4+2
  @id(13) string<3> str3; // 4  4+3
  @id(14) string<4> str4; // 3  4+4
  @key
  @id(15) string<5> str5; // 4  4+5
};

typedef sequence<long long, 3> LongLong3S;
typedef sequence<short, 3> Short3S;

@mutable
@OpenDDS::data_representation(XCDR2)
struct LC567Struct {            //LC Size
  @id(0) sequence<octet, 3> o3; // 5    3
  @id(1) sequence<long, 3> l3;  // 6  4x3
  @id(2) LongLong3S ll3;        // 7  8x3
  @id(3) Short3S s3;            // 3    4 (2 elements)
  @id(4) string<4> str4;        // 3    4
  @id(5) string<5> str5;        // 5    5
  @id(6) sequence<long> ls;     // 6  4x2 (2 elements)
  @key
  @id(7) string<7> str7;        // 5    7
};

@mutable
@OpenDDS::data_representation(XCDR1)
@OpenDDS::data_representation(XCDR2)
union MutableUnion switch (CommonFields) {
case E_SHORT_FIELD:
  @id(4) short short_field;
case E_LONG_FIELD:
  @id(6) long long_field;
case E_OCTET_FIELD:
  @id(8) octet octet_field;
case E_LONG_LONG_FIELD:
  @id(10) long long long_long_field;
};
