// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p16
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:376


#include "StockQuoterTypeSupportC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "StockQuoterTypeSupportC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_typecode\alias_typecode.cpp:51



// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_typecode\typecode_defn.cpp:464


#ifndef _TAO_TYPECODE_StockQuoter_QuoteSeq_GUARD
#define _TAO_TYPECODE_StockQuoter_QuoteSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        StockQuoter_QuoteSeq_0 (
          ::CORBA::tk_sequence,
          &StockQuoter::_tc_Quote,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_StockQuoter_QuoteSeq_0 =
        &StockQuoter_QuoteSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_StockQuoter_QuoteSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_StockQuoter_QuoteSeq (
    ::CORBA::tk_alias,
    "IDL:StockQuoter/QuoteSeq:1.0",
    "QuoteSeq",
    &TAO::TypeCode::tc_StockQuoter_QuoteSeq_0);
  

namespace StockQuoter
{
  ::CORBA::TypeCode_ptr const _tc_QuoteSeq =
    &_tao_tc_StockQuoter_QuoteSeq;
}

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for StockQuoter::QuoteTypeSupport.

StockQuoter::QuoteTypeSupport_ptr
TAO::Objref_Traits<StockQuoter::QuoteTypeSupport>::duplicate (
    StockQuoter::QuoteTypeSupport_ptr p)
{
  return StockQuoter::QuoteTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<StockQuoter::QuoteTypeSupport>::release (
    StockQuoter::QuoteTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

StockQuoter::QuoteTypeSupport_ptr
TAO::Objref_Traits<StockQuoter::QuoteTypeSupport>::nil (void)
{
  return StockQuoter::QuoteTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<StockQuoter::QuoteTypeSupport>::marshal (
    const StockQuoter::QuoteTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

StockQuoter::QuoteTypeSupport::QuoteTypeSupport (void)
{}

StockQuoter::QuoteTypeSupport::~QuoteTypeSupport (void)
{
}

void
StockQuoter::QuoteTypeSupport::_tao_any_destructor (void *_tao_void_pointer)
{
  QuoteTypeSupport *_tao_tmp_pointer =
    static_cast<QuoteTypeSupport *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

StockQuoter::QuoteTypeSupport_ptr
StockQuoter::QuoteTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return QuoteTypeSupport::_duplicate (
      dynamic_cast<QuoteTypeSupport_ptr> (_tao_objref)
    );
}

StockQuoter::QuoteTypeSupport_ptr
StockQuoter::QuoteTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return QuoteTypeSupport::_duplicate (
      dynamic_cast<QuoteTypeSupport_ptr> (_tao_objref)
    );
}

StockQuoter::QuoteTypeSupport_ptr
StockQuoter::QuoteTypeSupport::_nil (void)
{
  return 0;
}

StockQuoter::QuoteTypeSupport_ptr
StockQuoter::QuoteTypeSupport::_duplicate (QuoteTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
StockQuoter::QuoteTypeSupport::_tao_release (QuoteTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
StockQuoter::QuoteTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:StockQuoter/QuoteTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* StockQuoter::QuoteTypeSupport::_interface_repository_id (void) const
{
  return "IDL:StockQuoter/QuoteTypeSupport:1.0";
}

::CORBA::Boolean
StockQuoter::QuoteTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_typecode\objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_StockQuoter_QuoteTypeSupport (
    ::CORBA::tk_local_interface,
    "IDL:StockQuoter/QuoteTypeSupport:1.0",
    "QuoteTypeSupport");
  

namespace StockQuoter
{
  ::CORBA::TypeCode_ptr const _tc_QuoteTypeSupport =
    &_tao_tc_StockQuoter_QuoteTypeSupport;
}

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for StockQuoter::QuoteDataWriter.

StockQuoter::QuoteDataWriter_ptr
TAO::Objref_Traits<StockQuoter::QuoteDataWriter>::duplicate (
    StockQuoter::QuoteDataWriter_ptr p)
{
  return StockQuoter::QuoteDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<StockQuoter::QuoteDataWriter>::release (
    StockQuoter::QuoteDataWriter_ptr p)
{
  ::CORBA::release (p);
}

StockQuoter::QuoteDataWriter_ptr
TAO::Objref_Traits<StockQuoter::QuoteDataWriter>::nil (void)
{
  return StockQuoter::QuoteDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<StockQuoter::QuoteDataWriter>::marshal (
    const StockQuoter::QuoteDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

StockQuoter::QuoteDataWriter::QuoteDataWriter (void)
{}

StockQuoter::QuoteDataWriter::~QuoteDataWriter (void)
{
}

void
StockQuoter::QuoteDataWriter::_tao_any_destructor (void *_tao_void_pointer)
{
  QuoteDataWriter *_tao_tmp_pointer =
    static_cast<QuoteDataWriter *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

StockQuoter::QuoteDataWriter_ptr
StockQuoter::QuoteDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return QuoteDataWriter::_duplicate (
      dynamic_cast<QuoteDataWriter_ptr> (_tao_objref)
    );
}

StockQuoter::QuoteDataWriter_ptr
StockQuoter::QuoteDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return QuoteDataWriter::_duplicate (
      dynamic_cast<QuoteDataWriter_ptr> (_tao_objref)
    );
}

StockQuoter::QuoteDataWriter_ptr
StockQuoter::QuoteDataWriter::_nil (void)
{
  return 0;
}

StockQuoter::QuoteDataWriter_ptr
StockQuoter::QuoteDataWriter::_duplicate (QuoteDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
StockQuoter::QuoteDataWriter::_tao_release (QuoteDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
StockQuoter::QuoteDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:StockQuoter/QuoteDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* StockQuoter::QuoteDataWriter::_interface_repository_id (void) const
{
  return "IDL:StockQuoter/QuoteDataWriter:1.0";
}

::CORBA::Boolean
StockQuoter::QuoteDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_typecode\objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_StockQuoter_QuoteDataWriter (
    ::CORBA::tk_local_interface,
    "IDL:StockQuoter/QuoteDataWriter:1.0",
    "QuoteDataWriter");
  

namespace StockQuoter
{
  ::CORBA::TypeCode_ptr const _tc_QuoteDataWriter =
    &_tao_tc_StockQuoter_QuoteDataWriter;
}

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for StockQuoter::QuoteDataReader.

StockQuoter::QuoteDataReader_ptr
TAO::Objref_Traits<StockQuoter::QuoteDataReader>::duplicate (
    StockQuoter::QuoteDataReader_ptr p)
{
  return StockQuoter::QuoteDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<StockQuoter::QuoteDataReader>::release (
    StockQuoter::QuoteDataReader_ptr p)
{
  ::CORBA::release (p);
}

StockQuoter::QuoteDataReader_ptr
TAO::Objref_Traits<StockQuoter::QuoteDataReader>::nil (void)
{
  return StockQuoter::QuoteDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<StockQuoter::QuoteDataReader>::marshal (
    const StockQuoter::QuoteDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

StockQuoter::QuoteDataReader::QuoteDataReader (void)
{}

StockQuoter::QuoteDataReader::~QuoteDataReader (void)
{
}

void
StockQuoter::QuoteDataReader::_tao_any_destructor (void *_tao_void_pointer)
{
  QuoteDataReader *_tao_tmp_pointer =
    static_cast<QuoteDataReader *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

StockQuoter::QuoteDataReader_ptr
StockQuoter::QuoteDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return QuoteDataReader::_duplicate (
      dynamic_cast<QuoteDataReader_ptr> (_tao_objref)
    );
}

StockQuoter::QuoteDataReader_ptr
StockQuoter::QuoteDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return QuoteDataReader::_duplicate (
      dynamic_cast<QuoteDataReader_ptr> (_tao_objref)
    );
}

StockQuoter::QuoteDataReader_ptr
StockQuoter::QuoteDataReader::_nil (void)
{
  return 0;
}

StockQuoter::QuoteDataReader_ptr
StockQuoter::QuoteDataReader::_duplicate (QuoteDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
StockQuoter::QuoteDataReader::_tao_release (QuoteDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
StockQuoter::QuoteDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:StockQuoter/QuoteDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* StockQuoter::QuoteDataReader::_interface_repository_id (void) const
{
  return "IDL:StockQuoter/QuoteDataReader:1.0";
}

::CORBA::Boolean
StockQuoter::QuoteDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_typecode\objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_StockQuoter_QuoteDataReader (
    ::CORBA::tk_local_interface,
    "IDL:StockQuoter/QuoteDataReader:1.0",
    "QuoteDataReader");
  

namespace StockQuoter
{
  ::CORBA::TypeCode_ptr const _tc_QuoteDataReader =
    &_tao_tc_StockQuoter_QuoteDataReader;
}

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_interface\any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<StockQuoter::QuoteTypeSupport>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<StockQuoter::QuoteTypeSupport>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<StockQuoter::QuoteTypeSupport>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace StockQuoter
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      QuoteTypeSupport_ptr _tao_elem)
  {
    QuoteTypeSupport_ptr _tao_objptr =
      QuoteTypeSupport::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      QuoteTypeSupport_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<QuoteTypeSupport>::insert (
        _tao_any,
        QuoteTypeSupport::_tao_any_destructor,
        _tc_QuoteTypeSupport,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      QuoteTypeSupport_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<QuoteTypeSupport>::extract (
          _tao_any,
          QuoteTypeSupport::_tao_any_destructor,
          _tc_QuoteTypeSupport,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    StockQuoter::QuoteTypeSupport_ptr _tao_elem)
{
  StockQuoter::QuoteTypeSupport_ptr _tao_objptr =
    StockQuoter::QuoteTypeSupport::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    StockQuoter::QuoteTypeSupport_ptr *_tao_elem)
{
  TAO::Any_Impl_T<StockQuoter::QuoteTypeSupport>::insert (
      _tao_any,
      StockQuoter::QuoteTypeSupport::_tao_any_destructor,
      StockQuoter::_tc_QuoteTypeSupport,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    StockQuoter::QuoteTypeSupport_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<StockQuoter::QuoteTypeSupport>::extract (
        _tao_any,
        StockQuoter::QuoteTypeSupport::_tao_any_destructor,
        StockQuoter::_tc_QuoteTypeSupport,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_interface\any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<StockQuoter::QuoteDataWriter>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<StockQuoter::QuoteDataWriter>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<StockQuoter::QuoteDataWriter>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace StockQuoter
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      QuoteDataWriter_ptr _tao_elem)
  {
    QuoteDataWriter_ptr _tao_objptr =
      QuoteDataWriter::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      QuoteDataWriter_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<QuoteDataWriter>::insert (
        _tao_any,
        QuoteDataWriter::_tao_any_destructor,
        _tc_QuoteDataWriter,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      QuoteDataWriter_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<QuoteDataWriter>::extract (
          _tao_any,
          QuoteDataWriter::_tao_any_destructor,
          _tc_QuoteDataWriter,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    StockQuoter::QuoteDataWriter_ptr _tao_elem)
{
  StockQuoter::QuoteDataWriter_ptr _tao_objptr =
    StockQuoter::QuoteDataWriter::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    StockQuoter::QuoteDataWriter_ptr *_tao_elem)
{
  TAO::Any_Impl_T<StockQuoter::QuoteDataWriter>::insert (
      _tao_any,
      StockQuoter::QuoteDataWriter::_tao_any_destructor,
      StockQuoter::_tc_QuoteDataWriter,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    StockQuoter::QuoteDataWriter_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<StockQuoter::QuoteDataWriter>::extract (
        _tao_any,
        StockQuoter::QuoteDataWriter::_tao_any_destructor,
        StockQuoter::_tc_QuoteDataWriter,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// C:\Users\kuznetsovm\source\repos\OpenDDS\ace_wrappers\TAO\TAO_IDL\be\be_visitor_interface\any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<StockQuoter::QuoteDataReader>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<StockQuoter::QuoteDataReader>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<StockQuoter::QuoteDataReader>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace StockQuoter
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      QuoteDataReader_ptr _tao_elem)
  {
    QuoteDataReader_ptr _tao_objptr =
      QuoteDataReader::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      QuoteDataReader_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<QuoteDataReader>::insert (
        _tao_any,
        QuoteDataReader::_tao_any_destructor,
        _tc_QuoteDataReader,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      QuoteDataReader_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<QuoteDataReader>::extract (
          _tao_any,
          QuoteDataReader::_tao_any_destructor,
          _tc_QuoteDataReader,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    StockQuoter::QuoteDataReader_ptr _tao_elem)
{
  StockQuoter::QuoteDataReader_ptr _tao_objptr =
    StockQuoter::QuoteDataReader::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    StockQuoter::QuoteDataReader_ptr *_tao_elem)
{
  TAO::Any_Impl_T<StockQuoter::QuoteDataReader>::insert (
      _tao_any,
      StockQuoter::QuoteDataReader::_tao_any_destructor,
      StockQuoter::_tc_QuoteDataReader,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    StockQuoter::QuoteDataReader_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<StockQuoter::QuoteDataReader>::extract (
        _tao_any,
        StockQuoter::QuoteDataReader::_tao_any_destructor,
        StockQuoter::_tc_QuoteDataReader,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

