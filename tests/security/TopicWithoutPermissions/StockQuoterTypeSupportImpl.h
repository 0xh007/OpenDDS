/* -*- C++ -*- */
/* Generated by opendds_idl version 3.13 (ACE version 6.2a_p16) running on input file StockQuoter.idl */
#ifndef OPENDDS_IDL_GENERATED_STOCKQUOTERTYPESUPPORTIMPL_H_Q97LOA
#define OPENDDS_IDL_GENERATED_STOCKQUOTERTYPESUPPORTIMPL_H_Q97LOA
#include "StockQuoterC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "StockQuoterTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: StockQuoter */



/* Begin STRUCT: Quote */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const StockQuoter::Quote& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const StockQuoter::Quote& stru);

bool operator>>(Serializer& strm, StockQuoter::Quote& stru);

size_t gen_max_marshaled_size(const StockQuoter::Quote& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const StockQuoter::Quote> stru, bool align);

void gen_find_size(KeyOnly<const StockQuoter::Quote> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const StockQuoter::Quote> stru);

bool operator>>(Serializer& strm, KeyOnly<StockQuoter::Quote> stru);

template <>
struct MarshalTraits<StockQuoter::Quote> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace StockQuoter {
/// This structure supports use of std::map with one or more keys.
struct  Quote_OpenDDS_KeyLessThan {
  bool operator()(const StockQuoter::Quote&, const StockQuoter::Quote&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}


namespace StockQuoter {
class QuoteTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<StockQuoter::Quote> {
  typedef StockQuoter::Quote MessageType;
  typedef StockQuoter::QuoteSeq MessageSequenceType;
  typedef StockQuoter::QuoteTypeSupport TypeSupportType;
  typedef StockQuoter::QuoteTypeSupportImpl TypeSupportTypeImpl;
  typedef StockQuoter::QuoteDataWriter DataWriterType;
  typedef StockQuoter::QuoteDataReader DataReaderType;
  typedef StockQuoter::Quote_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "StockQuoter::Quote"; }
  static bool gen_has_key () { return false; }
  static size_t key_count () { return 0; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace StockQuoter {
class  QuoteTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<QuoteTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Quote> TraitsType;
  typedef QuoteTypeSupport TypeSupportType;
  typedef QuoteTypeSupport::_var_type _var_type;
  typedef QuoteTypeSupport::_ptr_type _ptr_type;

  QuoteTypeSupportImpl() {}
  virtual ~QuoteTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static QuoteTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<StockQuoter::Quote>();
bool gen_skip_over(Serializer& ser, StockQuoter::Quote*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Quote */

/* End MODULE: StockQuoter */
#endif /* OPENDDS_IDL_GENERATED_STOCKQUOTERTYPESUPPORTIMPL_H_Q97LOA */
