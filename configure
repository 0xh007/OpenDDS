# -*- CPerl -*-
eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
    & eval 'exec perl -S $0 $argv:q'
    if 0;

# configure script for OpenDDS
# Distributed under the OpenDDS License.
# See: http://www.opendds.org/license.html

use Getopt::Long;
use Dumpvalue;
use File::Spec;
use File::Copy;
require File::Temp;
use File::Temp ();
use FileHandle;
use Cwd;
use strict;
use warnings;

## Version of OCI's TAO to download
my $tao_version = '2.2a';

## arg processing and usage

my @specs = # Array of array-refs, each inner array is an option group which
            # has the format [Group Description, Opt1 Spec, Opt1 Description,
            # Opt2 Spec, Opt2 Description, ...]
  (
   ['Options controlling the configure script:',
    'help|h|?', 'Show this help and exit',
    'verbose|v', 'Trace script execution',
    'dry-run|n', 'Don\'t do anything',
   ],
   ['Build platform and compiler:',
    'host=s', 'Host (auto detect: linux, win32, solaris, macosx)',
    'compiler=s', 'Compiler (auto detect / guess by searching PATH)',
    'target=s', 'Cross-compile target (none)',
    'prefix=s', 'Installation prefix (none)',
   ],
   ['Build flags:',
    'debug!', 'Debugging (yes)',
    'optimize!', 'Optimization (no)',
    'inline!', 'Inlining (yes)',
    'static!', 'Static libraries (no)',
    'ipv6!', 'IPv6 support (no)',
   ],
   ['Required dependencies for OpenDDS:',
    'ace=s', 'ACE (use ACE_ROOT, ./ACE_wrappers, ../ACE_wrappers, or download)',
    'tao=s', 'TAO (use TAO_ROOT, ACE_ROOT/TAO, or download)',
   ],
   ['Advanced configuration:',
    'configh=s@', 'Extra text for config.h',
    'macros=s@', 'Extra text for platform_macros.GNU',
    'features=s@', 'Extra text for default.features',
    'mpcopts=s', 'Extra command-line args for MPC (if MPC is run)',
   ],
   ['Optional dependencies for OpenDDS:',
    'java:s', 'Java development kit (use JAVA_HOME)',
    'jboss:s', 'JBoss application server (use JBOSS_HOME)',
    'ant:s', 'Ant for JBoss (use ANT_HOME)',
    'wireshark:s', 'Wireshark (use WIRESHARK_SRC)',
    'glib:s', 'GLib for wireshark (use GLIB_ROOT)',
    'qt:s', 'Qt (use QTDIR)',
    'qt-include:s', 'Qt include dir (use QT4_INCDIR or QTDIR/include)',
    'boost:s', 'Boost (use BOOST_ROOT)',
    'boost-version:s', 'Boost version (only if needed to find headers)',
   ],
   ['Minimizing OpenDDS:',
    'built-in-topics!', 'Built-in Topics (yes)',
    'content-subscription!', 'Content-Subscription Profile (yes)',
    'content-filtered-topic!', 'ContentFilteredTopic (CS Profile) (yes)',
    'multi-topic!', 'MultiTopic (CS Profile) (yes)',
    'query-condition!', 'QueryCondition (CS Profile) (yes)',
    'ownership-profile!', 'Ownership Profile (yes)',
    'ownership-kind-exclusive!',
        'Exclusive Ownership (Ownership Profile) (yes)',
    'object-model-profile!', 'Object Model Profile (yes)',
    'persistence-profile!', 'Persistence Profile (yes)',
    'safety-profile!', 'Safety Profile (no)',
    'tests!', 'Build tests, examples, and performance tests (yes)',
   ],
  );

sub iterate {
  my $callback = shift;
  for my $group (@specs) {
    for my $n (1 .. (scalar @{$group} / 2)) {
      my $opt = ${$group}[$n * 2 - 1];
      my $descr = ${$group}[$n * 2];
      my ($optkey) = ($opt =~ /([\w-]+)/);
      &$callback(${$group}[0], $opt, $descr, $optkey, @_);
    }
  }
}

sub usage {
  my $current;
  my $ver;
  open VER, 'dds/Version.h' or die "can't open dds/Version.h, stopped";
  while (<VER>) {
    $ver = $1 if /#define DDS_VERSION "([^"]+)"/;
  }
  close VER;
  print <<"EOT";
Welcome to OpenDDS version $ver

Options for this script are listed below, with the default behavior described
in parens after the option description.
Boolean options can take the form "--opt" or "--no-opt", the more commonly
needed one (the one that changes the default behavior) is shown below.
Options that require arguments are shown as "--opt=VAL"  Options with optional
arguments are shown as "--opt[=VAL]".  Options that can be repeated with
cumulative effect are shown with a trailing "...".
EOT
  iterate(sub {
            my ($group, $opt, $descr, $optkey) = @_;
            if ($group ne $current) {
              $current = $group;
              print "\n$group\n";
            }
            $optkey .= '=VAL' if $opt =~ /=s/;
            $optkey .= '[=VAL]' if $opt =~ /:s/;
            $optkey = "[no-]$optkey"
              if ($opt =~ /!$/ && $descr =~ / \(yes\)$/);
            $optkey .= '...' if $opt =~ /s\@$/;
            print "--$optkey" . ' ' x (27 - length $optkey) . " $descr\n";
          }
         );
  exit 1;
}

my %opts = ();

## set defaults
my $cross_compile = 0;
my $needmpc = 0;

my @getopts = ();
iterate(sub {
          my ($group, $opt, $descr, $optkey) = @_;
          push @getopts, $opt;
        }
       );

if (! -r 'rules.dds.GNU') {
  print "ERROR: this script must be run from its own directory\n";
  exit 1;
}

GetOptions(\%opts, @getopts) or usage();
usage() if $opts{'help'};

if ($opts{'verbose'}) {
  print "Options:\n";
  new Dumpvalue()->dumpValue(\%opts);
}

## host

sub get_host {
  if ($^O eq 'darwin') {
    return 'macosx';
  }
  elsif ($^O eq 'MSWin32') {
    return 'win32';
  }
  else {
    return $^O; # solaris, linux match what we expect
  }
}

my %platforminfo =
  ('win32' => {
               'compilers' => ['cl'],
               'libpath' => 'PATH',
              },
   'macosx' => {
                'compilers' => ['g++'],
                'libpath' => 'DYLD_LIBRARY_PATH',
               },
   'solaris' => {
                 'compilers' => ['CC', 'g++'],
                 'libpath' => 'LD_LIBRARY_PATH',
                 'aceplatform' => 'sunos5_$COMP', # $COMP = sunc++ or g++
                 'aceconfig' => 'sunos$UNAMER', # $UNAMER = `uname -r`
                },
   'linux' => {
               'compilers' => ['g++', 'clang', 'clang++'],
               'libpath' => 'LD_LIBRARY_PATH',
               'aceplatform' => 'linux_$NONSTDCOMP', # $NONSTDCOMP = clang
              },
  );

$opts{'host'} = get_host() unless $opts{'host'};
if (!exists $platforminfo{$opts{'host'}}) {
  die "ERROR: unknown host $opts{'host'}, stopped";
}
print "host system is: $opts{'host'}\n" if $opts{'verbose'};
if ($opts{'host'} eq 'macosx') {
  my $vers = `sw_vers -productVersion`;
  $vers =~ /10\.(\d+)\.?/;
  my %versToName = (5 => 'leopard', 6 => 'snowleopard', 7 => 'lion',
                    8 => 'mountainlion', 9 => 'mavericks');
  if (!exists $versToName{$1}) {
    die "ERROR: Unknown/unsupported Mac OS X version: $1, stopped";
  }
  $opts{'host_version'} = $versToName{$1};
  print "Mac OS X version is: $opts{'host_version'}\n" if $opts{'verbose'};
}

$opts{'target'} = $opts{'host'} unless $opts{'target'};

if (!exists $platforminfo{$opts{'target'}}) {
  die "ERROR: unknown target $opts{'target'}, stopped";
}

if ($opts{'safety-profile'} || $opts{'target'} =~ /-safety$/) {
  print "configuring safety profile build\n" if $opts{'verbose'};
  $tao_version = "face-safety-22a";
  $opts{'target'} =~ s/-safety$//;
  $cross_compile = 1;
}

if ($opts{'host'} ne $opts{'target'} || $cross_compile) {
  print "Setting cross-compile build\n" if $opts{'verbose'};
  $needmpc = 1;
  $cross_compile = 1;
}

my ($slash, $exeext) = ($opts{'host'} eq 'win32') ? ('\\', '.exe') : ('/', '');

## Platform specifics
my %specific =
  ($slash eq '/' ?
   ('ext' => 'sh', 'export' => 'export', 'pathsep' => ':', 'refpre' => '${',
    'refpost' => '}') :
   ('ext' => 'cmd', 'export' => 'set', 'pathsep' => ';', 'refpre' => '%',
    'refpost' => '%')
  );

sub which {
  my $file = shift;
  for my $p (File::Spec->path()) {
    if (-x "$p/$file") {
      return "$p/$file";
    }
    elsif ($exeext ne '' && -x "$p/$file$exeext") {
      return "$p/$file$exeext";
    }
  }
  return undef;
}

## compiler

sub get_compiler {
  print "Auto-detecting compiler\n" if $opts{'verbose'};
  for my $stdcomp (@{$platforminfo{$opts{'host'}}->{'compilers'}}) {
    my $path = which($stdcomp);
    if ($path) {
      print "Found $stdcomp at: $path\n" if $opts{'verbose'};
      return $stdcomp;
    }
  }
  return undef;
}

if ($opts{'compiler'}) {
  my $standard = 0;
  for my $stdcomp (@{$platforminfo{$opts{'host'}}->{'compilers'}}) {
    $standard = 1 if $opts{'compiler'} eq $stdcomp;
  }
  $opts{'nonstdcompiler'} = 1 unless $standard;
}
else {
  $opts{'compiler'} = get_compiler();
  if (!defined $opts{'compiler'}) {
    die "Can't find a compiler, set PATH or run this script with the ".
      "--compiler option.\n" . ($slash eq '\\' ? "  For Microsoft Visual C++, ".
                                "run this script from the Visual Studio ".
                                "Command Prompt.\n" : '') . "Stopped";
  }
}
print "compiler is: $opts{'compiler'}\n" if $opts{'verbose'};

if ($opts{'compiler'} =~ /cl(\.exe)?$/i) {
  my $savepath = $ENV{'PATH'};
  my $clpath = which($opts{'compiler'});
  if ($clpath) {
    $clpath =~ s/vc\\bin(\\(x86_)?amd64)?/common7\\ide/i;
    $ENV{'PATH'} .= ";$clpath";
  }
  my %vers = (13 => 'vc71', 14 => 'vc8', 15 => 'vc9', 16 => 'vc10');
  open(CL, "\"$opts{'compiler'}\" /v 2>&1 |");
  while (<CL>) {
    if (/Compiler Version (\d+)\./) {
      if (!exists $vers{$1}) {
        die "Unknown or unsupported Visual C++ compiler version: $1\nStopped";
      }
      $opts{'compiler_version'} = $vers{$1};
      last;
    }
  }
  close CL;
  if (!$opts{'compiler_version'}) {
    die "Could not detect Visual C++ version, try running this script from\n" .
      "the Visual Studio Command Prompt.\nStopped";
  }
  $ENV{'PATH'} = $savepath;
  print "detected Visual C++ version: $opts{'compiler_version'}\n"
    if $opts{'verbose'};
}

sub addCurLibPathRef {
  my $buildEnvRef = shift();
  my $build = $buildEnvRef->{'build'};
  my $platform = $opts{$build};
  my $libpathname = $platforminfo{$platform}->{'libpath'};
  my $curLibPathRef = $specific{refpre} . $libpathname . $specific{refpost};
  # Add to hash
  $buildEnvRef->{$libpathname} = $curLibPathRef;
}

my $curpathRef = $specific{refpre} . 'PATH' . $specific{refpost};
my %extraEnv = ('build' => 'target',  'PATH' => $curpathRef);
my %hostEnv = ('build' => 'host',  'PATH' => $curpathRef);
my %targetEnv = ('build' => 'target',  'PATH' => $curpathRef);

# Set initial libpath
addCurLibPathRef(\%extraEnv);
addCurLibPathRef(\%hostEnv);
addCurLibPathRef(\%targetEnv);

sub setSomeEnv {
  my($name, $val, $hashref) = @_;
  $val = Cwd::abs_path($val) if -d $val;
  $val =~ s!/!\\!g if $slash eq '\\';
  $hashref->{$name} = $val;
}

sub setEnv {
  setSomeEnv(@_, \%ENV);
}

sub setExtraEnv {
  setSomeEnv(@_, \%extraEnv);
}

sub setHostEnv {
  setSomeEnv(@_, \%hostEnv);
}

sub setTargetEnv {
  setSomeEnv(@_, \%targetEnv);
}

## ace
my $ace_src_root;

# if --ace specified at the command line
if ($opts{'ace'}) {
  if (!-r $opts{'ace'} . '/ace/ACE.h') {
    die "Can't find ACE at $opts{'ace'}\n";
  }
  $ace_src_root = $opts{'ace'};
}
# else if ACE_ROOT set
elsif ($ENV{'ACE_ROOT'}) {
  if (!-r $ENV{'ACE_ROOT'} . '/ace/ACE.h') {
    die "Can't find ACE at $ENV{'ACE_ROOT'}\n";
  }
  $ace_src_root = $ENV{'ACE_ROOT'};
}
# else if ACE_wrappers subdirectory exists
elsif (-r './ACE_wrappers/ace/ACE.h') {
  $ace_src_root = "./ACE_wrappers";
}
# else if ACE_wrappers peer directory exists
elsif (-r '../ACE_wrappers/ace/ACE.h') {
  $ace_src_root = "../ACE_wrappers";
}

## tao

my $tao_src_root;

# if --tao specified at the command line
if ($opts{'tao'}) {
  if (!-r $opts{'tao'} . '/tao/ORB.h') {
    die "Can't find TAO at $opts{'tao'}\n";
  }
  $tao_src_root = $opts{'tao'};
}
# else if TAO_ROOT set
elsif ($ENV{'TAO_ROOT'}) {
  if  (!-r $ENV{'TAO_ROOT'} . '/tao/ORB.h') {
    die "Can't find TAO at $ENV{'TAO_ROOT'}\n";
  }
  $tao_src_root = $ENV{'TAO_ROOT'};
}
# else if TAO is within the ace source root
elsif (defined $ace_src_root && -r $ace_src_root . '/TAO/tao/ORB.h') {
  $tao_src_root = $ace_src_root . $slash . 'TAO';
}
# else if TAO is a peer of the ace source root
elsif (defined $ace_src_root && -r $ace_src_root . '/../TAO/tao/ORB.h') {
  $tao_src_root =  $ace_src_root . $slash . 'TAO';
}

sub locate_mpc {
  if (!$ENV{'MPC_ROOT'} && -r $ace_src_root . '/MPC/MPC.ico') {
    setEnv('MPC_ROOT', $ace_src_root . $slash . 'MPC');
  }
  elsif (!$ENV{'MPC_ROOT'}) {
    die "Can't find MPC.  Please set MPC_ROOT or make sure MPC exists in\n".
      "the 'MPC' directory under ACE_ROOT ($ace_src_root), stopped";
  }
  return $ENV{MPC_ROOT};
}

## Download ACE+TAO

if (!$ace_src_root || !$tao_src_root) {
  my $urlbase = 'http://download.ociweb.com/TAO-' . $tao_version . '/';
  my $file = 'ACE+TAO-' . $tao_version . '_with_latest_patches_NO_makefiles.'
    . ($slash eq '/' ? 'tar.gz' : 'zip');
  my $download_message = "Downloading ACE+TAO $tao_version with latest patches";
  if (-r $file) {
    print "Using ACE+TAO source package $file\n" if $opts{'verbose'};
  }
  else {
    eval {
      require LWP::UserAgent;
      my $ua = LWP::UserAgent->new;
      $ua->env_proxy;
      print $download_message . "\n";
      if ($opts{'dry-run'}) {
        print "Dry-run: would LWP::UserAgent get $urlbase$file\nExiting\n";
        exit 1;
      }
      my $response = $ua->get($urlbase . $file, ':content_file' => $file);
      if ($response->is_error) {
        die $response->message . "\nstopped";
      }
    };
    if ($@) {
      if (which('wget')) {
        print $download_message . " (using wget)\n";
        if ($opts{'dry-run'}) {
          print "Dry-run: would run wget $urlbase$file\nExiting\n";
          exit 1;
        }
        if (system("wget $urlbase$file")) {
          die "ERROR from wget, stopped";
        }
      }
      elsif (which('curl')) {
        print $download_message . " (using curl)\n";
        if ($opts{'dry-run'}) {
          print "Dry-run: would run curl $urlbase$file -o $file\nExiting\n";
          exit 1;
        }
        if (system("curl $urlbase$file -o $file")) {
          die "ERROR from curl, stopped";
        }
      }
      else {
        die "Can't download ACE+TAO using LWP, wget, or curl.\nDownload it ".
          "from $urlbase$file, place the file here\n, and re-run the script.\n";
      }
    }
  }

  print "Extracting archive $file\n";
  eval {require Archive::Extract;};
  if ($@) {
    my $err = 1;
    my $ddsroot = getcwd;
    if ($slash eq '/') {
      if ($opts{'dry-run'}) {
        print "Dry-run: would run " . ($^O eq 'solaris' ? 'g' : '') .
          "tar xzf $ddsroot/$file\nExiting\n";
        exit 1;
      }
      $err = system(($^O eq 'solaris' ? 'g' : '') . "tar xzf $ddsroot/$file");
    }
    if ($err) {
      die "Can't extract $file, extract it to " . Cwd::abs_path('.') .
        "\nand run this script again.\nStopped";
    }
  }
  else {
    {no warnings 'once'; $Archive::Extract::PREFER_BIN = 1}
    my $ae = Archive::Extract->new('archive' => $file);
    if ($opts{'dry-run'}) {
      print "Dry-run: would Archive::Extract $file\nExiting\n";
      exit 1;
    }
    if (!$ae->extract('to' => '.')) {
      die $ae->error . "\nstopped";
    }
  }

  $ace_src_root ||= './ACE_wrappers';
  $tao_src_root ||= './ACE_wrappers/TAO';
}

print "Using ace_src_root: $ace_src_root\n" if $opts{'verbose'};
print "Using tao_src_root: $tao_src_root\n" if $opts{'verbose'};

my $tao_maj = 1;
open TAOVER, $tao_src_root . '/VERSION' or die "can't open TAO VERSION\n";
while (<TAOVER>) {
  if (/^This is TAO version (\d)/) {
    $tao_maj = $1;
    last;
  }
}
close TAOVER;

sub clone_host_and_target {
  my($source_dir, $name) = @_;
  my $cur_dir = getcwd;
  print "Changing dir to $source_dir\n" if $opts{'verbose'};
  locate_mpc();
  chdir($source_dir);
  eval {
    print "cloning build tree\n" if $opts{'verbose'};
    system("$ENV{'MPC_ROOT'}/clone_build_tree.pl host target");
  };
  print "Changing dir back to $cur_dir\n" if $opts{'verbose'};
  chdir($cur_dir);
}

## Configure ACE+TAO

sub backup_and_open {
  my $file = shift;
  if (!$opts{'dry-run'} && -r $file) {
    my $backup = (-e $file . '.bak') ? ($file . '.bak') : $file . ".bak.$$";
    copy($file, $backup);
    print "WARNING: overwriting existing $file (saved a backup copy as " .
      "$backup)\n";
  }
  if ($opts{'dry-run'}) {
    return File::Temp->new(UNLINK => 1);
  }
  my $fh = new FileHandle;
  open $fh, ">$file" or die "Can't write to $file, stopped";
  return $fh;
}

my $wrote_df = 0;

# config.h
sub write_config_h {
  my %buildEnv = %{shift()};
  if (-r "$buildEnv{'ACE_ROOT'}/ace/config.h") {
    print "ACE_ROOT/ace/config.h exists, skipping configuration of ACE+TAO\n";
  }
  else {
    my $pi = $platforminfo{$buildEnv{'build'}};
    $opts{'optimize'} = 0 if !exists $opts{'optimize'};

    my $CFGH = backup_and_open("$buildEnv{'ACE_ROOT'}/ace/config.h");
    # If this is not a cross-compile host build
    if ($buildEnv{'build'} eq 'target') {
      for my $line (@{$opts{'configh'}}) {
        print $CFGH "$line\n";
      }
    }
    my $cfg = $opts{'host'};
    if ($pi->{'aceconfig'}) {
      $cfg = $pi->{'aceconfig'};
      $cfg =~ s/\$UNAMER/my $u = `uname -r`; chomp $u; $u/e;
    }
    $cfg .= '-' . $opts{'host_version'} if $opts{'host_version'};
    print $CFGH "#include \"ace/config-$cfg.h\"\n";
    # For safety profile builds, define the proper symbol in config.h
    if (defined $opts{'no-opendds-safety-profile'}) {
      print $CFGH "#define ACE_FACE_SAFETY_BASE\n";
    }
    close $CFGH;
    print "Wrote config.h\n" if $opts{'verbose'};
  }
}

# default.features
sub write_default_features {
  my %buildEnv = %{shift()};
  # If this is not a cross-compile host build
  if ($buildEnv{'build'} eq 'target') {
    if ($opts{'ipv6'} || $opts{'features'}) {
      my $DF = backup_and_open("$buildEnv{'ACE_ROOT'}/bin/MakeProjectCreator" .
                               "/config/default.features");
      $wrote_df = 1;
      print $DF "ipv6=1\n" if $opts{'ipv6'};
      for my $f (@{$opts{'features'}}) {
        print $DF "$f\n";
      }
      $DF->close;
      print "Wrote default.features\n" if $opts{'verbose'};
    }
  }
}

# platform_macros.GNU
sub write_platform_macros {
  my %buildEnv = %{shift()};
  if ($slash eq '/') {
    my $pi = $platforminfo{$opts{$buildEnv{'build'}}};
    my $PMG = backup_and_open("$buildEnv{'ACE_ROOT'}/include/makeinclude" .
                               "/platform_macros.GNU");
    # If this is not a cross-compile host build
    if ($buildEnv{'build'} eq 'target') {
      for my $line (@{$opts{'macros'}}) {
        print $PMG "$line\n";
      }
      for my $key ('debug', 'optimize', 'inline', 'static', 'ipv6') {
        if (exists $opts{$key}) {
          my $macro = ($key eq 'static') ? 'static_libs_only' : $key;
          print $PMG "$macro = $opts{$key}\n";
        }
      }
    }
    # If this is the HOST cross-compile build
    if ($buildEnv{'build'} eq 'host') {
      print $PMG "static_libs_only = 1\n";
    }
    if ($opts{'prefix'}) {
      print $PMG "INSTALL_PREFIX=" . $opts{'prefix'} . "\n";
    }
    my $plat = $opts{'host'};
    if ($pi->{'aceplatform'}) {
      $plat = $pi->{'aceplatform'};
      $plat =~ s/\$COMP/($opts{'compiler'} =~ m!CC!) ? 'sunc++' : 'g++'/e;
      $plat =~ s/\$NONSTDCOMP/($opts{'compiler'} =~ m!clang!) ? 'clang' : ''/e;
      $plat =~ s/_$//; # Trailing _
    }
    $plat .= '_' . $opts{'host_version'} if $opts{'host_version'};
    print $PMG "include \$(ACE_ROOT)/include/makeinclude/platform_$plat.GNU\n";
    if ($opts{'nonstdcompiler'}) {
      for my $var ('CC', 'CXX', 'LD') {
        print $PMG "$var = $opts{'compiler'}\n";
      }
    }
    $PMG->close;
    print "Wrote platform_macros.GNU\n" if $opts{'verbose'};
  }
}

## Optional OpenDDS dependencies

my %optdep =
# %opts key =>    [env var,         sanity check,          MPC feature]
  ('java' =>      ['JAVA_HOME',     'include/jni.h',             'java'],
   'jboss' =>     ['JBOSS_HOME',    'lib/jboss-common.jar'],
   'ant' =>       ['ANT_HOME',      'bin/ant'],
   'wireshark' => ['WIRESHARK_SRC', 'epan/packet.h',             'wireshark'],
   'glib' =>      ['GLIB_ROOT',     'include/glib-2.0/glib.h'],
   'qt' =>        ['QTDIR',         '',                          'qt4'],
   'boost' =>     ['BOOST_ROOT',    'include/boost/version.hpp', 'boost'],
  );

if (exists $opts{'java'}) {
  if ($opts{'static'}) {
    die "ERROR: --static can't be used with --java\n";
  }
  setEnv('JAVA_PLATFORM', $opts{'host'});
}

sub env_from_opt {
  my $key = shift;
  my $e = shift;
  if ($opts{$key} && (!$ENV{$e} || $opts{$key} ne $ENV{$e})) {
    setEnv($e, $opts{$key});
  }
}

if (exists $opts{'boost'} && exists $opts{'boost-version'}) {
  env_from_opt('boost', $optdep{'boost'}->[0]);
  env_from_opt('boost-version', 'BOOST_VERSION');
  if ($ENV{'BOOST_VERSION'}
      && !-r $ENV{'BOOST_ROOT'} . '/' . $optdep{'boost'}->[1]
      && -r $ENV{'BOOST_ROOT'} . '/include/' . $ENV{'BOOST_VERSION'}
      . '/boost/version.hpp') {
    $optdep{'boost'}->[1] = ''; # skip sanity check in for-loop below
  }
}

my @features;
for my $key(keys %optdep) {
  if (exists $opts{$key}) {
    print "Enabling $key\n" if $opts{'verbose'};
    my ($e, $s, $m) = @{$optdep{$key}};
    env_from_opt($key, $e);
    if ($s && !-r $ENV{$e} . '/' . $s) {
      die "Can't find $key at $ENV{$e} (using $s)\n";
    }
    push(@features, $m) if $m;
  }
}

if (exists $opts{'jboss'} && !exists $opts{'java'}) {
  die "--java is required for --jboss (OpenDDS JMS Provider)\n";
}

if (exists $opts{'jboss'} && !exists $opts{'ant'}) {
  die "--ant is required for --jboss (OpenDDS JMS Provider)\n";
}

if (exists $opts{'wireshark'} && !exists $opts{'glib'}) {
  die "--glib is required for --wireshark\n";
}

if ($opts{'qt-include'}) {
  setEnv('QT4_INCDIR', $opts{'qt-include'});
}

if (exists $opts{'qt'} && !-r ($ENV{'QT4_INCDIR'} ? $ENV{'QT4_INCDIR'} :
                               "$ENV{'QTDIR'}/include")
    . '/QtCore/qconfig.h') {
  die "Can't find qt at " . ($ENV{'QT4_INCDIR'} ? $ENV{'QT4_INCDIR'} :
                             $ENV{'QTDIR'}) . "\nstopped";
}

sub push_env_dir {
  my ($buildEnvRef, $var, $path) = @_;
  # Append or set
  if (exists $buildEnvRef->{PATH}) {
    $buildEnvRef->{$var} .= ($specific{'pathsep'} . $path);
  }
  else {
    $buildEnvRef->{$var} = $path;
  }
}

sub push_path {
  my ($buildEnvRef, $path) = @_;
  push_env_dir($buildEnvRef, 'PATH', $path);
}

sub push_libpath {
  my ($buildEnvRef, $path) = @_;
  my $build = $buildEnvRef->{'build'};
  my $platform = $opts{$build};
  my $libpathname = $platforminfo{$platform}->{'libpath'};
  push_env_dir($buildEnvRef, $libpathname, $path);
}

# host_tools.mwc
sub write_host_workspace {
  my %buildEnv = %{shift()};
  my $MWC = backup_and_open($buildEnv{'DDS_ROOT'} . '/host_tools.mwc');
  print $MWC <<'EOT';
workspace {
  $(ACE_ROOT)/ace/ace.mpc
  $(ACE_ROOT)/apps/gperf/src
  $(TAO_ROOT)/TAO_IDL
  $(TAO_ROOT)/tao/tao.mpc
  dds/idl/opendds_idl.mpc
}
EOT
  $MWC->close;
}

## Run MPC (if needed)

my $buildtao;
sub generate_workspace {
  $buildtao = 0;
  my %buildEnv = %{shift()};

  # Always default these to 1
  for my $feat (qw/built-in-topics ownership-profile/) {
    # If user disabled
    if (exists $opts{$feat} && !$opts{$feat}) {
      my $f = $feat;
      $f =~ s/-/_/g;
      # Set to 0
      push(@features, "$f=0");
    }
  }

  # default of these depends on whether we are doing a safety-profile build
  for my $feat (qw/content-subscription content-filtered-topic
                   multi-topic query-condition ownership-kind-exclusive
                   object-model-profile persistence-profile
                   no-opendds-safety-profile/) {
    if (defined $opts{'no-opendds-safety-profile'}) {
      # Turns default to 0 for these
      print "Checking if user enabled $feat\n" if $opts{verbose};
      # Unless user enabled feature
      if (!(exists $opts{$feat} && $opts{$feat})) {
        print "$feat not enabled, turned off for safety profile\n"
          if $opts{verbose};
        my $f = $feat;
        $f =~ s/-/_/g;
        push(@features, "$f=0");
      }
    } else {
      # If user disabled
      if (exists $opts{$feat} && !$opts{$feat}) {
        my $f = $feat;
        $f =~ s/-/_/g;
        push(@features, "$f=0");
      }
    }
  }

  $needmpc ||= (scalar @features ? 1 : 0);
  # Create user macros
  if ($needmpc && $slash eq '/') {
    print "Creating user_macros.GNU with MPC feature settings\n"
      if $opts{'verbose'};
    # If this is not a cross-compile host build
    if ($buildEnv{'build'} eq 'target') {
      my $UM = backup_and_open($buildEnv{'DDS_ROOT'} . '/user_macros.GNU');
      for my $feat (@features) {
        print $UM ($feat =~ /=/ ? $feat : "$feat=1"), "\n";
      }
      if ($cross_compile) {
      print $UM <<'EOT';
TAO_IDL = $(HOST_ACE)/bin/tao_idl
TAO_IDL_DEP = $(TAO_IDL)
OPENDDS_IDL = $(HOST_DDS)/bin/opendds_idl
OPENDDS_IDL_DEP = $(OPENDDS_IDL)
EOT
      }
      $UM->close;
    }
  }

  my $tests = 1;
  ($needmpc, $tests) = (1, 0) if (exists $opts{'tests'} && !$opts{'tests'});


  # If this is a target cross-compile build
  if ($cross_compile && $buildEnv{'build'} eq 'target') {
    # TAO will be built seperately
    $buildtao = 0;
  } else {
    # build tao if tao_idl does not exist, unless this is a safety profile build
    $buildtao = 1 if !-x "$buildEnv{'ACE_ROOT'}/bin/tao_idl$exeext";
  }

  if ($slash eq '/' && ($needmpc || !-r 'GNUmakefile')) {
    $needmpc = 'gnuace';
  }
  elsif ($slash ne '/' && ($needmpc || !-r 'DDS.sln')) {
    $needmpc = $opts{'compiler_version'};
  }

  if ($needmpc) {
    locate_mpc();

    # Append to default.features
    if (@features && ($buildEnv{'build'} eq 'target')) {
      my $df_file =
        "$buildEnv{'ACE_ROOT'}/bin/MakeProjectCreator/config/default.features";
      my $DF = $wrote_df
        ? ($opts{'dry-run'} ? File::Temp->new(UNLINK => 1)
                            : new FileHandle(">>$df_file"))
        : backup_and_open($df_file);
      for my $f (@features) {
        print $DF ($f =~ /=/ ? $f : "$f=1"), "\n";
      }
      $DF->close;
      print '' . ($wrote_df ? 'Appended to' : 'Wrote') . " default.features\n"
        if $opts{'verbose'};
    }

    my $ws = 'DDS.mwc';
    if (-r $buildEnv{'DDS_ROOT'} . "/host_tools.mwc") {
      $ws = 'host_tools.mwc';
    }
    elsif (!$tests && $buildtao) {
      $ws = 'DDS_TAO.mwc';
    }
    elsif (!$tests && !$buildtao) {
      $ws = 'DDS_no_tests.mwc';
    }
    elsif ($buildtao) {
      $ws = 'DDS_TAO_all.mwc';
    }

    if ($tao_maj == 2 && $ws =~ /TAO/) {
      $ws =~ s/TAO/TAOv2/;
    }

    my $static = ($opts{'static'} && $slash ne '/') ? '-static' : '';

    if (!defined $ENV{'CIAO_ROOT'}) {
      setEnv('CIAO_ROOT', 'dont_use_ciao'); # otherwise MPC.cfg includes /MPC
    }

    print 'Running MPC to generate ', ($needmpc eq 'gnuace' ? 'makefiles' :
                                       'project files'), ".\n";
    my $mwcargs = "-type $needmpc $buildEnv{'DDS_ROOT'}$slash$ws $static";
    $mwcargs .= ' ' . $opts{'mpcargs'} if defined $opts{'mpcargs'};
    print "OpenDDS mwc command line: $mwcargs\n" if $opts{'verbose'};

    if (!$opts{'dry-run'}) {
      # Temporarily set to the build environment
      my $prev_ace_root = $ENV{'ACE_ROOT'};
      my $prev_tao_root = $ENV{'TAO_ROOT'};
      my $prev_dds_root = $ENV{'DDS_ROOT'};
      setEnv('ACE_ROOT', $buildEnv{'ACE_ROOT'});
      setEnv('TAO_ROOT', $buildEnv{'TAO_ROOT'});
      setEnv('DDS_ROOT', $buildEnv{'DDS_ROOT'});

      # Create OpenDDS workspace
      if (system("perl $ENV{'ACE_ROOT'}/bin/mwc.pl $mwcargs") != 0) {
        die "Error from MPC, stopped";
      }

      # If this is a target safety profile build
      if (defined $opts{'no-opendds-safety-profile'}) {
        my $ddsroot = getcwd;
        if ($opts{'verbose'}) {
          print "Changing dir to $buildEnv{'ACE_ROOT'}" . $slash . "ace\n"
        }
        chdir($buildEnv{'ACE_ROOT'}. "/ace");

        # Generate ACE workspace separately, to exclude TAO
        my $mwcargs = "-type $needmpc $static " . $opts{'mpcargs'};

        print "ACE mwc command line: $mwcargs\n" if $opts{'verbose'};

        if (system("perl $ENV{'ACE_ROOT'}/bin/mwc.pl $mwcargs") != 0) {
          die "Error from MPC, stopped";
        }

        print "Changing dir back to $ddsroot\n" if $opts{'verbose'};
        chdir($ddsroot);
      }
      # Undo Temporary set of build environment
      setEnv('ACE_ROOT', $prev_ace_root) if defined $prev_ace_root;
      setEnv('TAO_ROOT', $prev_tao_root) if defined $prev_tao_root;
      setEnv('DDS_ROOT', $prev_dds_root) if defined $prev_dds_root;
    }

    $ws =~ s/\.mwc$/.sln/;
    $opts{'solution_file'} = $ws;
  }
  elsif ($opts{'compiler_version'}) { #win32, using DDS release package projects
    $opts{'solution_file'} = 'DDS' . ($opts{'static'} ? '_Static' : '') .
      ($opts{'compiler_version'} ne 'vc71' ? "_$opts{'compiler_version'}" : '').
        '.sln';
  }
}

# Environment setenv and GNUmakefile.dist
sub write_environment {
  my %buildEnv = %{shift()};
  my $dir = shift;
  my $MK = undef;
  if ($slash eq '/') {
    if (!$opts{'dry-run'} && !-r $dir . '/GNUmakefile.dist') {
      move($dir . '/GNUmakefile', $dir . '/GNUmakefile.dist');
    }
    $MK = backup_and_open($dir . '/GNUmakefile');
  }

  my $SE = backup_and_open($dir . '/setenv.' . $specific{'ext'});
  for my $key (keys %buildEnv) {
    if (UNIVERSAL::isa($buildEnv{$key}, 'ARRAY')) {
      print $SE "$specific{'export'} $key=",
        join($specific{'pathsep'}, @{$buildEnv{$key}}), $specific{'pathsep'},
          $specific{'refpre'}, $key, $specific{'refpost'}, "\n";
      if ($MK) {
        print $MK "export $key := ",
          join($specific{'pathsep'}, @{$buildEnv{$key}}), $specific{'pathsep'},
            $specific{'refpre'}, $key, $specific{'refpost'}, "\n";
      }
    }
    elsif ($key ne 'build') {
      print $SE "$specific{'export'} $key=$buildEnv{$key}\n";
      if ($MK) {
        print $MK "export $key := $buildEnv{$key}\n";
      }
    }
  }

  $SE->close;
  print "Wrote setenv.$specific{'ext'}\n" if $opts{'verbose'};

  if ($MK) {
    print $MK "include GNUmakefile.dist\n";
    $MK->close;
    print "Wrote GNUmakefile, wrapping orignial GNUmakefile.dist\n"
      if $opts{'verbose'};
  }
}

sub configure_build {
  my $buildEnvRef = shift;
  write_config_h($buildEnvRef);
  write_default_features($buildEnvRef);
  write_platform_macros($buildEnvRef);
  generate_workspace($buildEnvRef);
  write_environment($buildEnvRef, $buildEnvRef->{'DDS_ROOT'});
}

sub write_cross_compile_makefile {
  my $MF = backup_and_open("GNUmakefile");
  print $MF <<"EOT";
all clean realclean install depend:
	cd build/host && \$(MAKE) \$@
	cd $targetEnv{'ACE_ROOT'}/ace && \$(MAKE) \$@
	cd build/target && \$(MAKE) \$@
.PHONY: all clean realclean install depend
EOT
  $MF->close;
}

if ($cross_compile) {
  # Clone build trees for ACE and DDS
  clone_host_and_target(".", "OpenDDS");
  clone_host_and_target($ace_src_root, "ACE");
  setHostEnv('ACE_ROOT', $ace_src_root . "/build/host");
  setHostEnv('DDS_ROOT', './build/host');
  setTargetEnv('ACE_ROOT', $ace_src_root . "/build/target");
  setTargetEnv('DDS_ROOT', './build/target');
  setTargetEnv('HOST_ACE', $ace_src_root . "/build/host");
  setTargetEnv('HOST_DDS', './build/host');

  # Clone build tree for TAO, if not nested in ACE
  my $ace_src_fullpath = Cwd::abs_path($ace_src_root);
  my $tao_src_fullpath = Cwd::abs_path($tao_src_root);
  # If TAO is nested within ACE
  if (substr($tao_src_root, 0, length($ace_src_root)) eq $ace_src_root) {
    setHostEnv('TAO_ROOT', $ace_src_root . "/build/host/TAO");
    setTargetEnv('TAO_ROOT', $ace_src_root . "/build/host/TAO");
  } else {
    # No need to clone, built only in host
    setHostEnv('TAO_ROOT', $tao_src_root);
    setTargetEnv('TAO_ROOT', $tao_src_root);
  }

  # ACE_ROOT, TAO_ROOT, DDS_ROOT
  ## PATH and LD_LIBRARY_PATH
  my $extraPath = $hostEnv{'ACE_ROOT'} . $slash . 'bin' . $specific{pathsep} .
                  $hostEnv{'DDS_ROOT'} . $slash . 'bin';
  push_path(\%hostEnv, $extraPath);
  push_path(\%targetEnv, $extraPath);

  push_libpath(\%hostEnv, $hostEnv{'ACE_ROOT'} . $slash . 'lib');
  push_libpath(\%hostEnv, $hostEnv{'DDS_ROOT'} . $slash . 'lib');
  push_libpath(\%targetEnv, $targetEnv{'ACE_ROOT'} . $slash . 'lib');
  push_libpath(\%targetEnv, $targetEnv{'DDS_ROOT'} . $slash . 'lib');

  # host_tools.mwc
  write_host_workspace(\%hostEnv);

  # All other build stuff
  configure_build(\%hostEnv);

  # Before configuring target, set default
  if ($opts{'safety-profile'}) {
    $opts{'no-opendds-safety-profile'} = 0;
  }

  configure_build(\%targetEnv);

  # Write environment for ACE target
  write_environment(\%targetEnv, $targetEnv{ACE_ROOT} . '/ace');

  # Write main GNUmakefile
  write_cross_compile_makefile();
} else {
  setExtraEnv('ACE_ROOT', $ace_src_root);
  setExtraEnv('TAO_ROOT', $tao_src_root);
  setExtraEnv('DDS_ROOT', '.');

  my $extraPath = $extraEnv{'ACE_ROOT'} . $slash . 'bin' . $specific{pathsep} .
                  $extraEnv{'DDS_ROOT'} . $slash . 'bin';
  push_path(\%extraEnv, $extraPath);

  push_libpath(\%extraEnv, $extraEnv{'ACE_ROOT'} . $slash . 'lib');
  push_libpath(\%extraEnv, $extraEnv{'DDS_ROOT'} . $slash . 'lib');

  configure_build(\%extraEnv);
}

## Final message

print "Completed configuring OpenDDS, next ";
if ($slash eq '/') {
  print "run '", ($^O eq 'solaris' ? 'g' : ''), "make'";
}
else {
  print "build '", $opts{'solution_file'}, "' using the '",
    ($opts{'optimize'} ? 'Release' : 'Debug'), "' configuration";
}
print " to compile ", 
  ($cross_compile ? "\nthe host and target builds of " : ''),
  "OpenDDS", (($buildtao || $cross_compile) ? ' and ACE+TAO' : '') ,".\n",
  "You can use the generated setenv.$specific{'ext'} script ",
  ($cross_compile ? "in the\nbuilds/host and builds/target dirs " : ''),
  "to set environment\nvariables for future shell sessions.\n";
if ($slash ne '/') {
  print "Start Visual Studio from this command prompt so that it inherits ",
    "the correct\nenvironment variables.\n";
}
