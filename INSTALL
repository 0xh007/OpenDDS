If you're building OpenDDS for use by Java applications, please see the file
$DDS_ROOT/java/INSTALL instead of this one.

BUILDING OpenDDS
========================

* Supported platforms:

  We have built OpenDDS on number of different platforms and compilers.  See
  $DDS_ROOT/README for a complete description of supported platforms.


* Compiling:

  Starting with version 2.2, OpenDDS has a "configure" script to automate the
  steps described below (Option B).  This script requires Perl 5.10 or newer to
  be installed and available on the system PATH.  Perl 5.8 may be sufficient on
  Unix systems but ActiveState Perl 5.10 or newer should be used on Windows.
  To start the script simply change to the directory containing this INSTALL
  file, and run

  ./configure         (*nix)
  configure           (Windows: use a Visual Studio Command Prompt)

  Optionally add "--help" to the command line to see the advanced options
  available for this script.  The configure script will download ACE+TAO and
  configure it for your platform.  To use an existing ACE+TAO installation,
  either set the ACE_ROOT and TAO_ROOT enviornment variables or pass the --ace
  and --tao (if TAO is not at $ACE_ROOT/TAO) options to configure.
  If configure runs successfully it will end with a message about the next
  steps for compiling OpenDDS.

  The configure script creates an environment setup file called setenv to
  restore all the environment variables the build and test steps rely on.
  The main makefile for *nix builds temporarily sets the environment as well.

* Test 

  Optionally, you can run the entire OpenDDS regression test suite with one
  Perl command.

  NOTE: Make sure your environment is set by checking the variable DDS_ROOT.
        Run setenv if it is not set.

  $DDS_ROOT/bin/auto_run_tests.pl
      If you built static libraries, add "-Config STATIC" to this command.
      On Windows if you build Release mode add "-ExeSubDir Release".
      On Windows if you build static libraries add "-ExeSubDir Static_Debug"
      or "-ExeSubDir Static_Release".


* Cross Compiling:

  Use the configure script, and set the target platform to one different than
  the host.

  ./configure --target=lynxos-178

  In this setup, configure will clone the DDS and TAO source trees for host and 
  target builds.  It will do a static build of the host tools (such as
  opendds_idl and tao_idl) in the host environment, and a full build in the
  target environment.  Most parameters to configure are then assumed to be
  target parameters.

  Any testing has to be done manually.

* Getting Started building your own applications:

  See the OpenDDS Developer's Guide:
      http://download.ociweb.com/OpenDDS/OpenDDS-latest.pdf

  Run the Developer's Guide Example program:
  Unix                                            Windows
  ----                                            -------
  cd $DDS_ROOT/DevGuideExamples/DCPS/Messenger    cd %DDS_ROOT%\DevGuideExam...
  ./run_test.pl                                   perl run_test.pl
  [ see the notes in step 5 "Test", above, for options to run_test.pl ]

  The Perl script will start 3 processes, the DCPSInfoRepo, one publisher, and
  one subscriber.  Note that the command lines used to spawn these processes
  are echoed back to standard output.  The options and config files used here
  are helpful starting points for developing and running your own OpenDDS
  applcations.


* Platform specific notes:

 QNX:
  QNX requires the MPC feature "link_codecfactory=1" be present during makefile
  generation for both TAO and OpenDDS.  Technically, this is part of Step #1
  above because it's required in order to have a functioning TAO build.  Use
  the instructions under "Note:" above to re-generate the makefiles after
  adding the line "link_codecfactory=1" to the end of
  $ACE_ROOT/bin/MakeProjectCreator/config/default.features.

 Android:
  Currently there is only support for building with Standalone compiler
  toolchain of the Android Native Development Kit.  The standard NDK compiler
  is not identified as supporting exceptions or RTTI, as of NDK r5c.
  Compilation on Windows can fail due to cygwin/Windows not differentiating
  between the ACE file Signal.h and the system file signal.h.
