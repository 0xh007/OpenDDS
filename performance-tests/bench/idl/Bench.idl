#include "Builder.idl"

module Bench {

  struct UniqueId {
    unsigned long long high;
    unsigned long long low;
  };

  typedef sequence<octet> OctetSeq;

// ---
// Data Section
// ---

#pragma DCPS_DATA_TYPE "Bench::Data"
#pragma DCPS_DATA_KEY  "Bench::Data id.high"
#pragma DCPS_DATA_KEY  "Bench::Data id.low"
  struct Data {
    UniqueId id;
    unsigned long total_hops;
    unsigned long hop_count;
    Builder::TimeStamp created_time;
    Builder::TimeStamp sent_time;
    OctetSeq buffer;
  };

// ---
// Action Section
// ---

  struct ActionConfig {
    string name;
    string type;
    Builder::PropertySeq params;
    Builder::StringSeq readers;
    Builder::StringSeq writers;
  };

  typedef sequence<ActionConfig> ActionConfigSeq;

  struct ActionReport {
    Builder::PropertySeq properties;
  };

  typedef sequence<ActionReport> ActionReportSeq;

// ---
// Worker Section
// ---

  struct WorkerConfig {
    Builder::TimeStamp enable_time;
    Builder::TimeStamp start_time;
    Builder::TimeStamp stop_time;
    Builder::ProcessConfig process;
    ActionConfigSeq actions;
    ActionReportSeq action_reports;
  };

  struct WorkerReport {
    Builder::TimeStamp construction_time;
    Builder::TimeStamp enable_time;
    Builder::TimeStamp start_time;
    Builder::TimeStamp stop_time;
    Builder::TimeStamp destruction_time;

    // Discovery Stats
    unsigned long undermatched_readers;
    unsigned long undermatched_writers;
    Builder::TimeStamp max_discovery_time_delta;

    // Latency Stats
    unsigned long long latency_sample_count;
    double latency_min;
    double latency_max;
    double latency_mean;
    double latency_var_x_sample_count;
    double latency_stdev;
    double latency_weighted_median;
    unsigned long long latency_weighted_median_overflow;

    // Jitter Stats
    unsigned long long jitter_sample_count;
    double jitter_min;
    double jitter_max;
    double jitter_mean;
    double jitter_var_x_sample_count;
    double jitter_stdev;
    double jitter_weighted_median;
    unsigned long long jitter_weighted_median_overflow;

    // Round-Trip Latency Stats
    unsigned long long round_trip_latency_sample_count;
    double round_trip_latency_min;
    double round_trip_latency_max;
    double round_trip_latency_mean;
    double round_trip_latency_var_x_sample_count;
    double round_trip_latency_stdev;
    double round_trip_latency_weighted_median;
    unsigned long long round_trip_latency_weighted_median_overflow;

    // Round-Trip Jitter Stats
    unsigned long long round_trip_jitter_sample_count;
    double round_trip_jitter_min;
    double round_trip_jitter_max;
    double round_trip_jitter_mean;
    double round_trip_jitter_var_x_sample_count;
    double round_trip_jitter_stdev;
    double round_trip_jitter_weighted_median;
    unsigned long long round_trip_jitter_weighted_median_overflow;
  };

  module NodeController {
    typedef unsigned long NodeId;
    typedef unsigned long WorkerId;

    struct WorkerConfig {
      WorkerId worker_id;
      string config;
    };
    typedef sequence<WorkerConfig> WorkerConfigs;

#pragma DCPS_DATA_TYPE "Bench::NodeController::Config"
    struct Config {
      NodeId node_id;
      WorkerConfigs workers;
    };

#pragma DCPS_DATA_TYPE "Bench::NodeController::Report"
    struct Report {
      NodeId node_id;
      WorkerId worker_id;
      boolean failed;
      string details;
    };
  };
};

